openapi: 3.0.2
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md
servers:
  - url: 'http://localhost:8080'
info:
  version: 1.0.0
  title: Scheduler Service
  description: |
    REST API for the Scheduler Service. This API allows create and manage
    scheduled jobs.
  contact:
    name: Andriy Kornatskyy
    email: andriy.kornatskyy@live.com
  license:
    name: MIT
tags:
  - name: collections
    description: Provides operations for creating and managing collections of scheduled jobs.
  - name: jobs
    description: Provides operations for creating and managing scheduled jobs.
  - name: history
    description: Provides operations for managing job history.
  - name: others
paths:
  /collections:
    get:
      summary: Retrieves a list of job collections
      operationId: ListCollections
      tags:
        - collections
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CollectionItem'
                required:
                  - items
              example:
                items:
                  - id: 65ada2f9-be3d-4960-a7f4-ea47fe3323b9
                    name: 'My App #1'
                    state: enabled
                  - id: 7d76cb30-f581-49ca-a718-d353a1d129a8
                    name: My Other App
                    state: disabled
    post:
      summary: Creates a job collection
      operationId: CreateCollection
      tags:
        - collections
      requestBody:
        description: a job collection to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: validation errors
        '404':
          description: not found
        '409':
          description: conflict
        '422':
          description: unprocessable entity
  /collections/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      summary: Retrieves a specified job collection
      operationId: RetrieveCollection
      tags:
        - collections
      parameters:
        - $ref: '#/components/parameters/if-none-match'
      responses:
        '200':
          description: ok
          headers:
            ETag:
              $ref: '#/components/schemas/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '304':
          description: not modified
        '400':
          description: validation errors
        '404':
          description: not found
    patch:
      summary: Updates a job collection
      operationId: UpdateCollection
      tags:
        - collections
      parameters:
        - $ref: '#/components/parameters/if-match'
      requestBody:
        description: a job collection to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '204':
          description: updated
          content:
            application/json:
              example:
        '400':
          description: validation errors
        '404':
          description: not found
        '409':
          description: conflict
        '412':
          description: precondition failed
        '422':
          description: unprocessable entity
    delete:
      description: Deletes a single job collection
      operationId: DeleteCollection
      tags:
        - collections
      parameters:
        - $ref: '#/components/parameters/if-match'
      responses:
        '204':
          description: deleted
        '400':
          description: validation errors
        '404':
          description: not found
        '412':
          description: precondition failed
  /jobs:
    get:
      summary: Retrieves a list of jobs
      operationId: ListJobs
      tags:
        - jobs
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobItem'
                required:
                  - items
              example:
                items:
                  - id: 7ce1f17e-48b1-4e73-be22-771fa764993a
                    name: 'My Task #1'
                    schedule: '@every 15s'
                    state: disabled
                  - id: 94946f60-711f-4044-b08e-ccd9ba998f88
                    name: 'My Task #2'
                    schedule: '@every 1m'
                    state: enabled
    post:
      summary: Creates a job
      operationId: CreateJob
      tags:
        - jobs
      requestBody:
        description: a job to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobDefinition'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: validation errors
        '404':
          description: not found
        '409':
          description: conflict
        '422':
          description: unprocessable entity
  /jobs/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      summary: Retrieves a specified job definition
      operationId: RetrieveJob
      tags:
        - jobs
      parameters:
        - $ref: '#/components/parameters/if-none-match'
      responses:
        '200':
          description: ok
          headers:
            ETag:
              $ref: '#/components/schemas/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDefinition'
        '304':
          description: not modified
        '400':
          description: validation errors
        '404':
          description: not found
    patch:
      summary: Updates a job definition
      operationId: UpdateJob
      tags:
        - jobs
      parameters:
        - $ref: '#/components/parameters/if-match'
      requestBody:
        description: a job definition to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobDefinition'
      responses:
        '204':
          description: updated
        '400':
          description: validation errors
        '404':
          description: not found
        '409':
          description: conflict
        '412':
          description: precondition failed
        '422':
          description: unprocessable entity
    delete:
      description: Deletes a single job definition
      operationId: DeleteJob
      tags:
        - jobs
      parameters:
        - $ref: '#/components/parameters/if-match'
      responses:
        '204':
          description: job definition deleted
        '400':
          description: validation errors
        '404':
          description: not found
        '412':
          description: precondition failed
  /jobs/{id}/status:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      summary: Retrieves a specified job status
      operationId: RetrieveJobStatus
      tags:
        - jobs
      parameters:
        - $ref: '#/components/parameters/if-none-match'
      responses:
        '200':
          description: ok
          headers:
            ETag:
              $ref: '#/components/schemas/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '400':
          description: validation errors
        '404':
          description: not found
    patch:
      summary: Updates a specified job status
      operationId: PatchJobStatus
      tags:
        - jobs
      parameters:
        - $ref: '#/components/parameters/if-match'
      requestBody:
        description: job to run
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/JobStatus'
      responses:
        '204':
          description: updated
        '400':
          description: validation errors
        '404':
          description: not found
        '409':
          description: conflict
        '412':
          description: precondition failed
        '422':
          description: unprocessable entity
  /jobs/{id}/history:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      summary: Retrieves a list of specified job history
      operationId: ListJobHistory
      tags:
        - history
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobHistory'
                required:
                  - items
        '400':
          description: validation errors
    delete:
      description: Deletes a specified job history
      operationId: DeleteJobHistory
      tags:
        - history
      parameters:
        - $ref: '#/components/parameters/before'
      responses:
        '204':
          description: job history deleted
        '400':
          description: validation errors
        '404':
          description: not found
  /health:
    get:
      summary: Queries health-related information
      operationId: RetrieveHealth
      tags:
        - others
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '503':
          description: service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
              example:
                status: down
                message: unable connect to database
components:
  schemas:
    CollectionItem:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: unique job collection name
          example: 'My App #1'
          minimum: 3
          maximum: 64
        state:
          type: string
          default: enabled
          enum:
            - enabled
            - disabled
    Collection:
      allOf:
        - $ref: '#/components/schemas/CollectionItem'
      properties:
        updated:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
    JobItem:
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: unique job name
          readOnly: true
          example: 'My Task #1'
        state:
          type: string
          readOnly: true
          enum:
            - enabled
            - disabled
        schedule:
          type: string
          readOnly: true
          example: '@every 1h'
    JobDefinition:
      allOf:
        - $ref: '#/components/schemas/JobItem'
      properties:
        updated:
          type: string
          format: date-time
          readOnly: true
        collectionId:
          type: string
          format: uuid
        action:
          $ref: '#/components/schemas/Action'
      required:
        - collectionId
        - action
    Action:
      properties:
        type:
          type: string
          default: HTTP
          enum:
            - HTTP
        request:
          $ref: '#/components/schemas/HttpRequest'
        retryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
      required:
        - request
        - retryPolicy
    HttpRequest:
      properties:
        method:
          type: string
          default: GET
          enum:
            - HEAD
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
        uri:
          type: string
          format: uri
          example: http://example.com
        headers:
          type: array
          items:
            $ref: '#/components/schemas/NameValuePair'
        body:
          type: string
      required:
        - uri
    NameValuePair:
      properties:
        name:
          type: string
          example: X-Requested-With
        value:
          type: string
          example: XMLHttpRequest
      required:
        - name
        - value
    RetryPolicy:
      properties:
        retryCount:
          type: integer
          format: int32
          description: the number of times a retry should be attempted
          default: 3
          example: 3
          minimum: 0
          maximum: 10
        retryInterval:
          type: string
          description: the interval between retries, duration in ISO 8601 format
          default: 5s
          example: 10s
        deadline:
          type: string
          default: 20s
          example: 1m
    JobStatus:
      properties:
        running:
          type: boolean
        runCount:
          type: integer
          format: int32
          readOnly: true
          example: 157
        errorCount:
          type: integer
          format: int32
          readOnly: true
          example: 39
        lastRun:
          type: string
          format: date-time
          readOnly: true
        nextRun:
          type: string
          format: date-time
          readOnly: true
    JobHistory:
      properties:
        action:
          type: string
          description: action name
          example: HTTP
        started:
          type: string
          format: date-time
        finished:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - completed
            - failed
        retryCount:
          type: integer
          format: int32
          example: 0
          minimum: 0
          maximum: 3
        message:
          type: string
          example:
    ETag:
      type: string
      example: '"fde7bculys"'
    Health:
      properties:
        status:
          type: string
          example: up
        message:
          type: string
      required:
        - status
  parameters:
    id:
      in: path
      name: id
      required: true
      schema:
        type: string
        format: uuid
    before:
      in: query
      name: before
      required: false
      schema:
        type: string
        format: date-time
    if-match:
      in: header
      name: If-Match
      required: false
      schema:
        $ref: '#/components/schemas/ETag'
    if-none-match:
      in: header
      name: If-None-Match
      required: false
      schema:
        $ref: '#/components/schemas/ETag'
